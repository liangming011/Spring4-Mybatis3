package com.lm.springthread.service.impl.javathread;

public class Multithreading {

    /**
     * 需要注意的是，无论用那种方式实现了多线程，调用start方法并不意味着立即执行多线程代码，而是使得线程变为可运行状态。
     * */

    /**
     * 创建Thread子类还是实现Runnable接口？
     *
     * 对于这两种方式哪种好并没有一个确定的答案，它们都能满足要求。就我个人意见，我更倾向于实现Runnable接口这种方法。
     * 因为线程池可以有效的管理实现了Runnable接口的线程，如果线程池满了，新的线程就会排队等候执行，直到线程池空闲出来为止。
     * 而如果线程是通过实现Thread子类实现的，这将会复杂一些。
     *
     * 有时我们要同时融合实现Runnable接口和Thread子类两种方式。
     * 例如，实现了Thread子类的实例可以执行多个实现了Runnable接口的线程。一个典型的应用就是线程池。
     * */

    /**
     *   run start的区别
     *
     * start方法是启动一个线程，而线程中的run方法来完成实际的操作。
     * 如果开发人员直接调用run方法，那么就会将这个方法当作一个普通函数来调用，并没有多开辟线程，
     * 开发人员如果希望多线程异步执行，则需要调用start方法。
     * */

    /**
     *   sleep wait的区别
     *
     * 1.两者处理的机制不同，sleep方法主要是，让线程暂停执行一段时间，时间一到自动恢复，并不会释放所占用的锁，当调用wait方法以后，他会释放所占用的对象锁，等待其他线程调用notify方法才会再次醒来。
     * 2.sleep是Thread的静态方法，是用来控制线程自身流程的，而wait是object的方法，用于进行线程通信。
     * 3.两者使用的区域不同。sleep可以在任何地方使用，wait必须放在同步控制方法，或者语句块中执行。
     * */

    /**
     *   synchronized notify wait的运用
     *
     * synchronized关键字有两种用法，synchronized方法和synchronized语句块。
     * public synchronized void function(){}
     * synchronized(object){}
     * 当某个资源被synchronized所修饰，线程1线程2等多个线程在共同请求这个资源，线程1先请求到，调用了对象的wait方法释放了对象的锁，此时线程2可以对这个对象进行访问，
     * 在工作结束时可以调用对象的notify方法，唤醒等待队列中正在等待的线程，此时被唤醒的线程将会再一次拿到对象锁，对对象进行操作。可以调用notifyAll方法，唤醒等待队列中的所有线程。
     *
     * 需要注意的是一个线程被唤醒不代表立即获取对象锁，必须等调用的线程对象的方法推出synchronized块释放对象锁后，被唤醒的进程才会获得对象锁。
     * */

    /**
     *  1.为什么要使用线程池
     *
     * 在java中，如果每个请求到达就创建一个新线程，开销是相当大的。在实际使用中，服务器在创建和销毁线程上花费的时间和消耗的系统资源都相当大，
     * 甚至可能要比在处理实际的用户请求的时间和资源要多的多。除了创建和销毁线程的开销之外，活动的线程也需要消耗系统资源。如果在一个jvm里创建太多的线程，
     * 可能会使系统由于过度消耗内存或“切换过度”而导致系统资源不足。为了防止资源不足，服务器应用程序需要采取一些办法来限制任何给定时刻处理的请求数目，
     * 尽可能减少创建和销毁线程的次数，特别是一些资源耗费比较大的线程的创建和销毁，尽量利用已有对象来进行服务，这就是“池化资源”技术产生的原因。
     *
     * 线程池主要用来解决线程生命周期开销问题和资源不足问题。通过对多个任务重复使用线程，线程创建的开销就被分摊到了多个任务上了，而且由于在请求到达时线程已经存在，
     * 所以消除了线程创建所带来的延迟。这样，就可以立即为请求服务，使用应用程序响应更快。另外，通过适当的调整线程中的线程数目可以防止出现资源不足的情况。
     * */

    /**
     *   2.线程池的组成部分
     *
     * 一个比较简单的线程池至少应包含线程池管理器、工作线程、任务列队、任务接口等部分。
     *
     * 其中线程池管理器的作用是创建、销毁并管理线程池，将工作线程放入线程池中,至少有下列功能：创建线程池，销毁线程池，添加新任务。
     * 工作线程是一个可以循环执行任务的线程，在没有任务是进行等待；
     * 任务列队的作用是提供一种缓冲机制，将没有处理的任务放在任务列队中；
     * 任务接口是每个任务必须实现的接口，以便工作线程处理,主要用来规定任务的入口、任务执行完后的收尾工作、任务的执行状态等，工作线程通过该接口调度任务的执行。
     * */

    /**
     * 3.线程池适合应用的场合
     *
     * 当一个服务器接受到大量短小线程的请求时，使用线程池技术是非常合适的，它可以大大减少线程的创建和销毁次数，提高服务器的工作效率。
     * 但是线程要求的运动时间比较长，即线程的运行时间比…….
     * */


}
