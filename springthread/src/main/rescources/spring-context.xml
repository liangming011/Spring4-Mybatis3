<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!-- 数据源及事务配置文件 -->
    <import resource="spring-mybatis.xml"/>
    <!--<import resource="spring-aop.xml"/>-->
    <!--<import resource="spring-aspectj.xml"/>-->

    <!-- 自动扫描组件 Spring业务层 配置部分 除去注解为@Controller的类 -->
    <context:component-scan base-package="com.lm.springthread">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 启动AOP支持 基于@AspectJ切面的驱动器-->
    <aop:aspectj-autoproxy/>

    <!--对注解@Transactional注解的Bean进行加工处理  以注入事务管理切面-->
    <tx:annotation-driven transaction-manager="txManager" />
    <!-- 配置事务管理器，依赖于数据源 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 定义个事物，指定事务管理器 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!--传播行为-->
            <tx:method name="delete*" propagation="REQUIRES_NEW" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="save*" propagation="REQUIRES_NEW" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="insert*" propagation="REQUIRES_NEW" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRES_NEW" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- aop配置事物-->
    <aop:config>
        <!-- 配置事物切点 -->
        <aop:pointcut id="serviceMethods" expression="execution(* com.lm.springthread.service.impl.*ServiceImpl.*(..))" />
        <!-- 配置事物切面 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
    </aop:config>

    <!-- 配置线程池 -->
     <bean id ="taskExecutor" name="taskExecutor"  class ="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
           p:corePoolSize="5"
           p:keepAliveSeconds="30000"
           p:maxPoolSize="1000"
           p:queueCapacity="200"
           p:rejectedExecutionHandler="rejectedExecutionHandler">
         <!-- 线程池维护线程的最少数量 -->
         <!-- 线程池维护线程所允许的空闲时间 -->
         <!-- 线程池维护线程的最大数量 -->
         <!-- 线程池所使用的缓冲队列 -->

         <!-- 线程池对拒绝任务(无线程可用)的处理策略 ThreadPoolExecutor.CallerRunsPolicy策略 ,调用者的线程会执行该任务,如果执行器已关闭,则丢弃.  -->
         <property name="rejectedExecutionHandler">
             <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
         </property>
     </bean>

</beans>