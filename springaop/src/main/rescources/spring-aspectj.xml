<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!-- 测试@AspectJ的自动状态代理工厂 -->
    <!-- 目标对象 -->
    <bean id="waiter" class="com.lm.springaop.aop.aspectj.example.NaiveWaiter"/>
    <!--@AspectJ注解的切面类-->
    <bean class="com.lm.springaop.aop.aspectj.PreGreetingAspect"/>
    <!--自功代理创建器， 启动将@AspectJ注解切面类注入目标Bean中 -->
    <!-- 如果实用<aop:aspectj-autoproxy/>注解开启 aop 那么久不需要再写下面的自功代理创建器，默认隐藏了 -->
    <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"/>

    <!-- 测试@AspectJ的引介增强 -->
    <bean id="waiter1" class="com.lm.springaop.aop.aspectj.example.NaiveWaiter"/>
    <bean class="com.lm.springaop.aop.aspectj.EnableSellerAspect"/>
    <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"/>

    <!-- 基于Schema配置切面 建议在无法使用注解时，使用这种方式，注解已经很方便了 -->
    <aop:config proxy-target-class="true">
        <aop:aspect ref="preGreetingAspect">
        </aop:aspect>
    </aop:config>

    <bean id="preGreetingAspect" class="com.lm.springaop.aop.aspectj.PreGreetingAspect"/>
    <bean id="naiveWaiter" class="com.lm.springaop.aop.aspectj.example.NaiveWaiter"/>

</beans>